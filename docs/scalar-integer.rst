Scalar integer
--------------

StrictYAML parses to a YAML object, not
the value directly to give you more flexibility
and control over what you can do with the YAML.

This is what that can object can do - in many
cases if parsed as a integer, it will behave in
the same way.

.. code-block:: python

    from strictyaml import Map, Int, load
    
    schema = Map({"a": Int(), "b": Int()})

With variable 'valid_sequence':

.. code-block:: yaml

  a: 1
  b: 5



.. code-block:: python

    load(valid_sequence, schema) == {"a": 1, "b": 5}
    >>> True



.. code-block:: python

    str(load(valid_sequence, schema)["a"]) == "1"
    >>> True



.. code-block:: python

    float(load(valid_sequence, schema)["a"]) == 1.0
    >>> True



.. code-block:: python

    load(valid_sequence, schema)["a"] > 0
    >>> True



.. code-block:: python

    load(valid_sequence, schema)["a"] < 2
    >>> True



.. code-block:: python

    bool(load(valid_sequence, schema)['a'])
    >>> EXCEPTION RAISED:
      Cannot cast

With variable 'invalid_sequence_2':

.. code-block:: yaml

  a: string
  b: 2



.. code-block:: python

    load(invalid_sequence_2, schema)
    >>> EXCEPTION RAISED:
      when expecting an integer
      found non-integer
        in "<unicode string>", line 1, column 1:
          a: string
           ^

To just get an actual integer, use .data

.. code-block:: python

    type(load(valid_sequence, schema)["a"].data) is int
    >>> True


Page automatically generated by hitchdoc from:
  hitch/scalar-integer.story