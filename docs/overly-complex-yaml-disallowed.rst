Overly complex YAML disallowed
------------------------------

StrictYAML is an opinionated subset of the YAML
specification which refuses to parse features which
are otherwise valid in standard YAML.

For extra details on *why* these features are stripped
out of StrictYAML, see the FAQ, although for the
most part the answer is "because they're overcomplicated
and features that inhibit markup readability".

.. code-block:: python

    from strictyaml import Map, Int, Any, load
    from strictyaml import TagTokenDisallowed, FlowMappingDisallowed, AnchorTokenDisallowed
    
    schema = Map({"x": Map({"a": Any(), "b": Any(), "c": Any()})})

With variable 'tag_tokens':

.. code-block:: yaml

  x:
    a: !!str yes
    b: !!str 3.5
    c: !!str yes



.. code-block:: python

    load(tag_tokens, schema)
    >>> EXCEPTION RAISED:
      While scanning
        in "<unicode string>", line 2, column 11:
            a: !!str yes
                    ^ (line: 2)
      Found disallowed tag tokens (do not specify types in markup)
        in "<unicode string>", line 2, column 6:
            a: !!str yes
               ^ (line: 2)

With variable 'flow_style_sequence':

.. code-block:: yaml

  [a, b]: [x, y]



.. code-block:: python

    load(flow_style_sequence)
    >>> EXCEPTION RAISED:
      While scanning
        in "<unicode string>", line 1, column 1:
          [a, b]: [x, y]
          ^ (line: 1)
      Found ugly disallowed JSONesque flow mapping (surround with ' and ' to make text appear literally)
        in "<unicode string>", line 1, column 2:
          [a, b]: [x, y]
           ^ (line: 1)

With variable 'jinja2':

.. code-block:: yaml

  x: '{{ value }}'

Using quotation marks, you can parse a string starting or ending with { or }

.. code-block:: python

    load(jinja2) == {"x": "{{ value }}"}
    >>> True

With variable 'flow_style':

.. code-block:: yaml

  x: { a: 1, b: 2, c: 3 }



.. code-block:: python

    load(flow_style, schema)
    >>> EXCEPTION RAISED:
      While scanning
        in "<unicode string>", line 1, column 4:
          x: { a: 1, b: 2, c: 3 }
             ^ (line: 1)
      Found ugly disallowed JSONesque flow mapping (surround with ' and ' to make text appear literally)
        in "<unicode string>", line 1, column 5:
          x: { a: 1, b: 2, c: 3 }
              ^ (line: 1)



.. code-block:: python

    load(flow_style, schema)
    >>> EXCEPTION RAISED:
      While scanning
        in "<unicode string>", line 1, column 4:
          x: { a: 1, b: 2, c: 3 }
             ^ (line: 1)
      Found ugly disallowed JSONesque flow mapping (surround with ' and ' to make text appear literally)
        in "<unicode string>", line 1, column 5:
          x: { a: 1, b: 2, c: 3 }
              ^ (line: 1)

With variable 'node_anchors_and_references':

.. code-block:: yaml

  x: 
    a: &node1 3.5
    b: 1
    c: *node1



.. code-block:: python

    load(node_anchors_and_references, schema)
    >>> EXCEPTION RAISED:
      While scanning
        in "<unicode string>", line 2, column 6:
            a: &node1 3.5
               ^ (line: 2)
      Found confusing disallowed anchor token (surround with ' and ' to make text appear literally)
        in "<unicode string>", line 2, column 12:
            a: &node1 3.5
                     ^ (line: 2)


Page automatically generated by hitchdoc from:
  hitch/disallow.story