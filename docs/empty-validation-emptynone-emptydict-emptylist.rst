Empty validation (EmptyNone, EmptyDict, EmptyList)
--------------------------------------------------

Sometimes you may wish to not specify a value or specify
that it does not exist.

Using StrictYAML you can accept this as a valid value and
have it parsed to one of three things - None, {} (empty dict),
or [] (empty list).

.. code-block:: python

    from strictyaml import Map, Enum, EmptyNone, EmptyDict, EmptyList, load

With variable 'valid_sequence_1':

.. code-block:: yaml

  a: A



.. code-block:: python

    load(valid_sequence_1, Map({"a": Enum(["A", "B",]) | EmptyNone()})) == {"a": "A"}
    >>> True

With variable 'valid_sequence_2':

.. code-block:: yaml

  a:



.. code-block:: python

    load(valid_sequence_2, Map({"a": Enum(["A", "B",]) | EmptyNone()})) == {"a": None}
    >>> True

With variable 'valid_sequence_3':

.. code-block:: yaml

  a:



.. code-block:: python

    load(valid_sequence_3, Map({"a": Enum(["A", "B",]) | EmptyDict()})) == {"a": {}}
    >>> True

With variable 'valid_sequence_4':

.. code-block:: yaml

  a:



.. code-block:: python

    load(valid_sequence_3, Map({"a": Enum(["A", "B",]) | EmptyList()})) == {"a": []}
    >>> True

With variable 'invalid_sequence_1':

.. code-block:: yaml

  a: C



.. code-block:: python

    load(invalid_sequence_1, Map({"a": Enum(["A", "B",]) | EmptyNone()}))
    >>> EXCEPTION RAISED:
      when expecting an empty value
      found non-empty value
        in "<unicode string>", line 1, column 1:
          a: C
           ^


Page automatically generated by hitchdoc from:
  hitch/empty.story