Decimal
-------

StrictYAML parses to a YAML object representing
a decimal, not the value directly to give you more
flexibility and control over what you can do with the
YAML.

This is what that can object can do - in many
cases if parsed as a decimal, it will behave in
the same way.

To get a python decimal.Decimal object, use .data.

Parsing and validating as a Decimal is best for
values which require precision, like prices.

.. code-block:: python

    from strictyaml import Map, Decimal, load
    from decimal import Decimal as Dec
    
    schema = Map({"a": Decimal(), "b": Decimal()})

With variable 'valid_sequence':

.. code-block:: yaml

  a: 1.00000000000000000001
  b: 5.4135



.. code-block:: python

    load(valid_sequence, schema) == {"a": Dec('1.00000000000000000001'), "b": Dec('5.4135')}
    >>> True



.. code-block:: python

    str(load(valid_sequence, schema)["a"]) == '1.00000000000000000001'
    >>> True



.. code-block:: python

    float(load(valid_sequence, schema)["a"]) == 1.0
    >>> True



.. code-block:: python

    load(valid_sequence, schema)["a"] > Dec('1.0')
    >>> True



.. code-block:: python

    load(valid_sequence, schema)["a"] < Dec('1.00000000000000000002')
    >>> True



.. code-block:: python

    bool(load(valid_sequence, schema)['a'])
    >>> EXCEPTION RAISED:
      Cannot cast

With variable 'invalid_sequence_2':

.. code-block:: yaml

  a: string
  b: 2



.. code-block:: python

    load(invalid_sequence_2, schema)
    >>> EXCEPTION RAISED:
      when expecting a decimal
      found non-decimal
        in "<unicode string>", line 1, column 1:
          a: string
           ^

To just get an actual integer, use .data

.. code-block:: python

    type(load(valid_sequence, schema)["a"].data) is Dec
    >>> True


Page automatically generated by hitchdoc from:
  hitch/decimal.story