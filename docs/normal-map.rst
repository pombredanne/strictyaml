Normal Map
----------

Mappings of one value to another are represented by : in YAML
and parsed as python dicts.

Using StrictYAML's 'Map' you can validate that a mapping
contains the right keys and the right *type* of values.

Note: for mappings where you don't know the exact names of
the keys in advance but you do know the type, use MapPattern.

.. code-block:: python

    from strictyaml import Map, Int, load
    
    schema = Map({"a": Int(), "b": Int(), "c": Int()})
    
    schema_2 = Map({u"â": Int(), "b": Int(), "c": Int()})

With variable 'onekeymap':

.. code-block:: yaml

  x: 1



.. code-block:: python

    str(load(onekeymap, Map({"x": Int()})).data) == "{'x': 1}"
    >>> True

With variable 'valid_mapping_2':

.. code-block:: yaml

  â: 1
  b: 2
  c: 3



.. code-block:: python

    load(valid_mapping_2, schema_2)[u'â'] == 1
    >>> True

With variable 'valid_mapping_1':

.. code-block:: yaml

  â: 1
  b: 2
  c: 3



.. code-block:: python

    load(valid_mapping_1, schema_2)['keynotfound']
    >>> EXCEPTION RAISED:
      keynotfound



.. code-block:: python

    load(valid_mapping_1, schema_2).text
    >>> EXCEPTION RAISED:
      is a mapping, has no text value.

With variable 'invalid_sequence_1':

.. code-block:: yaml

  a: 1
  b: 2
  â: 3



.. code-block:: python

    load(invalid_sequence_1, schema)
    >>> EXCEPTION RAISED:
      while parsing a mapping
      unexpected key not in schema 'â'
        in "<unicode string>", line 3, column 1:
          "\xE2": '3'
          ^ (line: 3)

With variable 'invalid_sequence_2':

.. code-block:: yaml

  - 1
  - 2
  - 3



.. code-block:: python

    load(invalid_sequence_2, schema)
    >>> EXCEPTION RAISED:
      when expecting a mapping
        in "<unicode string>", line 1, column 1:
          - '1'
           ^ (line: 1)
      found non-mapping
        in "<unicode string>", line 3, column 1:
          - '3'
          ^ (line: 3)

With variable 'invalid_sequence_3':

.. code-block:: yaml

  a: 1
  b: 2
  c: 3
  d: 4



.. code-block:: python

    load(invalid_sequence_3, schema)
    >>> EXCEPTION RAISED:
      while parsing a mapping
      unexpected key not in schema 'd'
        in "<unicode string>", line 4, column 1:
          d: '4'
          ^ (line: 4)


Page automatically generated by hitchdoc from:
  hitch/map.story