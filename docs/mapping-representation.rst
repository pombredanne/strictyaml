Mapping representation
----------------------

When a YAML document with mappings is parsed, it is not parsed
as a dict but as a YAML object which behaves very similarly to
a dict, but also has some extra capabilities.

You can use .items(), .keys(), .values(), look up items with
square bracket notation, .get(key, with_default_if_nonexistent)
and use "x in y" notation to determine key membership.

To retrieve the equivalent dict (containing just other dicts, lists
and strings/ints/etc.) use .data.

.. code-block:: python

    from strictyaml import Map, Int, load
    
    schema = Map({"a": Int(), "b": Int(), "c": Int()})
    
    nested_schema = Map({"a": Int(), "b": Int(), "c": Map({"x": Int(), "y": Int()})})

With variable 'valid_sequence':

.. code-block:: yaml

  a: 1
  b: 2
  c: 3

Tests of equivalence with equivalent plain dicts with keys/values return True.

.. code-block:: python

    load(valid_sequence, schema) == {"a": 1, "b": 2, "c": 3}
    >>> True

Similar to dicts, you can test for the presence of a key in the mapping like this.

.. code-block:: python

    "a" in load(valid_sequence, schema)
    >>> True



.. code-block:: python

    load(valid_sequence, schema).items() == [("a", 1), ("b", 2), ("c", 3)]
    >>> True



.. code-block:: python

    load(valid_sequence, schema).values() == [1, 2, 3]
    >>> True



.. code-block:: python

    load(valid_sequence, schema).keys() == ["a", "b", "c"]
    >>> True



.. code-block:: python

    load(valid_sequence, schema)["a"] == 1
    >>> True



.. code-block:: python

    load(valid_sequence, schema).get("a") == 1
    >>> True



.. code-block:: python

    load(valid_sequence, schema).get("nonexistent") is None
    >>> True



.. code-block:: python

    len(load(valid_sequence, schema)) == 3
    >>> True



.. code-block:: python

    load(valid_sequence, schema).is_mapping()
    >>> True

With variable 'nested':

.. code-block:: yaml

  a: 1
  b: 2
  c:
    x: 1
    y: 2

.. code-block:: python

    unmodified = load(nested, nested_schema)
    modified = unmodified.copy()
    
    modified['b'] = unmodified['c']


Page automatically generated by hitchdoc from:
  hitch/mapping-representation.story