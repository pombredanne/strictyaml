Boolean validation
------------------

Boolean values can be parsed using a Bool
validator. It case-insensitively interprets
"yes", "true", "1", "on" as True and their
opposites as False.

Any values that are not one of those will
will cause a validation error.

.. code-block:: python

    from strictyaml import Bool, Str, MapPattern, YAMLValidationError, load
    
    schema = MapPattern(Str(), Bool())

With variable 'valid_sequence':

.. code-block:: yaml

  a: yes
  b: true
  c: on
  d: 1
  e: True
  v: False
  w: 0
  x: Off
  y: FALSE
  z: no



.. code-block:: python

    load(valid_sequence, schema) == \
      {"a": True, "b": True, "c": True, "d": True, "e": True, "v": False, "w": False, "x": False, "y": False, "z": False,}
    >>> True

Even though it returns a YAML object, that YAML object resolves to True/False

.. code-block:: python

    load(valid_sequence, schema)["w"] == False
    >>> True

Using .value you can get the actual boolean value parsed

.. code-block:: python

    load(valid_sequence, schema)["a"].value is True
    >>> True

Whereas using .text you can get the text

.. code-block:: python

    load(valid_sequence, schema)["y"].text == "FALSE"
    >>> True

The YAML boolean object cannot be cast directly to string since
the expected value is ambiguous ("False" or "FALSE"?)


.. code-block:: python

    str(load(valid_sequence, schema)["y"])
    >>> EXCEPTION RAISED:
      Cannot cast

With variable 'invalid_sequence':

.. code-block:: yaml

  a: yÃ¢s



.. code-block:: python

    load(invalid_sequence, schema)
    >>> EXCEPTION RAISED:
      when expecting a boolean value (one of "yes", "true", "on", "1", "no", "false", "off", "0")
      found non-boolean
        in "<unicode string>", line 1, column 1:
          a: "y\xE2s"
           ^ (line: 1)


Page automatically generated by hitchdoc from:
  hitch/boolean.story